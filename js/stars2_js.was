var fps = 60,
	interval = 1000 / fps,
	lastTime = (new Date()).getTime(),
	currentTime = 0,
	delta = 0;

var starsCount = 500,
	starsMinSpeed = 0.01,
	starsMaxSpeed = 0.05, 
	starsSpeed = starsMinSpeed,
	colorrange = [0,60,240],
	satrange = [50,100];
	stars = [];


(function() {
	"use strict";

	//const canvas = document.getElementById('canvas');
	const canvas = document.getElementById(page);
	const context = canvas.getContext('2d');

	function init() {
		window.onresize();
		window.requestAnimationFrame(render);
	}

	window.onresize = function() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;

		context.fillStyle = "white";
		context.strokeStyle = "white";
		context.translate(canvas.width / 2, canvas.height /2);
	};


	class Star {
		constructor() {
			this.reset();
		}
	
		reset() {
			this.x = this.random(-canvas.width / 2, canvas.width / 2);
			this.y = this.random(-canvas.height / 2, canvas.height / 2);
			this.z = 0;
			this.origX = this.x;
			this.origY = this.y;
		}

		random(min, max) {
			return min + Math.random() * (max - min);
		}

		update() {
			this.origX = this.x;
			this.origY = this.y;
			this.z += starsSpeed;
			this.x += this.x * this.z * starsSpeed;
			this.y += this.y * this.z * starsSpeed;
		}

		draw() {
//		var x = Math.random() * canvas.offsetWidth,
//		y = Math.random() * canvas.offsetHeight,
//		this.radius = Math.random() * 1.2;
		this.hue = colorrange[this.random(0,colorrange.length - 1)];
		this.sat = this.random(50,100);
		context.strokeStyle = "hsl(" + this.hue + ", " + this.sat + "%, 88%)";
			context.lineWidth = this.z;
			context.beginPath();
			context.moveTo(this.x, this.y);
			context.lineTo(this.origX, this.origY);
//			context.arcTo(this.x, this.y, this.origX, this.origY, 2 * Math.PI/*this.radius*/);
			context.stroke();
//		context.beginPath();
//		context.arc(this.x, this.y, this.radius, 0, 360);//2 * Math.PI
//		context.fill();
		}
	}


	function update() {
		for(var i = 0; i < stars.length; i++) {
			let star = stars[i];
			star.update();

			if(
			star.x - star.z > canvas.width / 2 || 
			star.x + star.z < -canvas.width / 2 || 
			star.y - star.z > canvas.height / 2 ||
			star.y + star.z < -canvas.height / 2
			) {
				star.reset();
			}
		}

		if (stars.length < starsCount)
			stars.push(new Star());
	}

	function draw() {
		for(var i = 0; i < stars.length; i++) {
			stars[i].draw();
		}
	}
	
	function clear() {
		context.clearRect(-canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);
	}

	function render() {
		currentTime = (new Date()).getTime();
		delta = currentTime - lastTime;

		if (delta > interval) {
			update();
			clear();
			draw();
			lastTime = currentTime - (delta % interval);
		}

		window.requestAnimationFrame(() => {
			render();
		});
	}
	init();
	new Taiji({
		canvas: canvas,//document.querySelector('canvas'),
/*		radius: 50,
		centerX: canvas.width / 2,//200,
		centerY: canvas.height / 2,//200,
		angle: Math.PI * .5,
		outlineColor: 'red',
		outlineWidth: 5,
		positiveColor: ['black'],
		negativeColor: ['white'],
		positiveWidth: 2,
		negativeWidth: 2,
		positiveInnerColor: ['red'],
		negativeInnerColor: ['red'],
		dividerWidth: 0,
		dividerColor: []*/
	});


	class RadialLine {
		constructor() {
			this.reset();
		}
	
		reset() {
			this.x = this.random(-canvas.width / 2, canvas.width / 2);
			this.y = this.random(-canvas.height / 2, canvas.height / 2);
			this.z = 0;
			this.origX = this.x;
			this.origY = this.y;
		}
/*
		random(min, max) {
			return min + Math.random() * (max - min);
		}
*/
		update() {
			this.origX = this.x;
			this.origY = this.y;
			this.z += starsSpeed;
			this.x += this.x * this.z * starsSpeed;
			this.y += this.y * this.z * starsSpeed;
		}

		draw()
		{
			this.centerX = 500;
			this.centerY = 300;
			this.radius1 = 100;
			this.radius2 = 300;
			this.numLines = 100;
			var angles = (2 * Math.PI) / numLines;
			for (var i=0; i<numLines; i++) {
				var angle = i * angles;
//				context.moveTo(this.centerX, this.centerY);
				this.x = this.centerX + this.radius1 * Math.cos(angle * (Math.PI/180));
				this.y = this.centerY + this.radius1 * Math.sin(angle * (Math.PI/180));
				context.moveTo(this.x, this.y);
				this.x1 = this.centerX + this.radius2 * Math.cos(angle * (Math.PI/180));
				this.y1 = this.centerY + this.radius2 * Math.sin(angle * (Math.PI/180));
				context.lineTo(this.x1, this.y1);
			}
		}
	}


	class Taiji {
		constructor() {
			this.reset();
		}
	
		reset() {
			this.x = this.random(-canvas.width / 2, canvas.width / 2);
			this.y = this.random(-canvas.height / 2, canvas.height / 2);
			this.z = 0;
			this.origX = this.x;
			this.origY = this.y;
		}

		random(min, max) {
			return min + Math.random() * (max - min);
		}

		update() {
			this.origX = this.x;
			this.origY = this.y;
			this.z += starsSpeed;
			this.x += this.x * this.z * starsSpeed;
			this.y += this.y * this.z * starsSpeed;
		}

		draw()
		{
//			context.moveTo(this.centerX, this.centerY);
			context.lineWidth = this.outlineWidth;
			context.beginPath();
			context.strokeStyle = "red";//"black";
//			context.moveTo(this.x, this.y);
//			context.lineTo(this.origX, this.origY);
//			context.arcTo(this.x, this.y, this.origX, this.origY, 2 * Math.PI/*this.radius*/);
			context.arc(this.centerX, this.centerY, this.radius, 0, 2 * Math.PI);
			context.stroke();
		}
	}
})();


/*(function gui() {
	let gui = new dat.GUI();

	let f1 = gui.addFolder('Stars');
	starCountGUI = f1.add(this, 'starsCount', 1, starsCount * 2).name('Count');
	starCountGUI.onChange(() => { stars = []; });
	f1.add(this, 'starsSpeed', starsMinSpeed, starsMaxSpeed).name('Speed');
	f1.open();
})();*/
